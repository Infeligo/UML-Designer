define([    "uml/metamodel/Element",    "uml/metamodel/diagrams/items/Item",    "uml/metamodel/diagrams/items/mapping"],function (Element, Item, mapping) {    return dojo.declare([Element], {        constructor: function () {            this._type = "UML Diagram";            this._items = [];            this._mapping = mapping;        },        loadData: function (data) {            this.inherited(arguments);            for (var i = 0; i < data.items.length; i++) {                try {                    var item = this.loadItemData(data.items[i]);                    this._items.push(item);                } catch (e) {                    console.error("Error loading diagram %s item data: ", this.getId(), data.items[i]);                    throw e;                }            }            return this;        },        getItems: function () {            return this._items.clone();        },        getItemById: function (id) {            return _.detect(this._items, function (it) { return it.getId() === id; });        },        loadItemData: function (data) {            return this.createItem(data.type).loadData(data);        },        createItem: function (type) {            if (!this._mapping[type]) throw new Error("Encountered item of unknown type: " + type);            return new this._mapping[type](this);        },        onAfterLoad: function () {            _.each(this._items, function (i) { i.onAfterLoad(); });        }    });});